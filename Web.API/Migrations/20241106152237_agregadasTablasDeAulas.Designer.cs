// <auto-generated />
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Web.API.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241106152237_agregadasTablasDeAulas")]
    partial class agregadasTablasDeAulas
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.10");

            modelBuilder.Entity("DisenioSistemas.Model.Abstract.Usuario", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("contrasena")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("contrasena");

                    b.Property<bool>("estado")
                        .HasColumnType("INTEGER")
                        .HasColumnName("estado");

                    b.Property<string>("usuario")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("usuario");

                    b.HasKey("id");

                    b.ToTable("Usuarios");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Model.Abstract.Aula", b =>
                {
                    b.Property<int>("idAula")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("idAula");

                    b.Property<bool>("aireAcondicionado")
                        .HasColumnType("INTEGER")
                        .HasColumnName("aireAcondicionado");

                    b.Property<int>("capacidad")
                        .HasColumnType("INTEGER")
                        .HasColumnName("capacidad");

                    b.Property<bool>("estado")
                        .HasColumnType("INTEGER")
                        .HasColumnName("estado");

                    b.Property<int>("numero")
                        .HasColumnType("INTEGER")
                        .HasColumnName("numero");

                    b.Property<int>("piso")
                        .HasColumnType("INTEGER")
                        .HasColumnName("piso");

                    b.Property<string>("tipoDePizarron")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("tipoDePizarron");

                    b.HasKey("idAula");

                    b.ToTable("Aulas");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Model.Entity.AnioLectivo", b =>
                {
                    b.Property<int>("IdAnioLectivo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("IdAnioLectivo");

                    b.Property<string>("Anio")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Anio");

                    b.HasKey("IdAnioLectivo");

                    b.ToTable("AnioLectivos");
                });

            modelBuilder.Entity("Model.Entity.Administrador", b =>
                {
                    b.HasBaseType("DisenioSistemas.Model.Abstract.Usuario");

                    b.ToTable("Administradores");
                });

            modelBuilder.Entity("Model.Entity.Bedel", b =>
                {
                    b.HasBaseType("DisenioSistemas.Model.Abstract.Usuario");

                    b.Property<string>("apellido")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("apellido");

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("nombre");

                    b.Property<string>("turno")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("turno");

                    b.ToTable("Bedeles");
                });

            modelBuilder.Entity("Model.Entity.AulaInformatica", b =>
                {
                    b.HasBaseType("Model.Abstract.Aula");

                    b.Property<bool>("canion")
                        .HasColumnType("INTEGER")
                        .HasColumnName("canion");

                    b.Property<int>("cantidadComputadoras")
                        .HasColumnType("INTEGER")
                        .HasColumnName("cantidadComputadoras");

                    b.ToTable("AulasInformatica");
                });

            modelBuilder.Entity("Model.Entity.AulaMultimedios", b =>
                {
                    b.HasBaseType("Model.Abstract.Aula");

                    b.Property<bool>("canion")
                        .HasColumnType("INTEGER")
                        .HasColumnName("canion");

                    b.Property<int>("cantidadComputadoras")
                        .HasColumnType("INTEGER")
                        .HasColumnName("cantidadComputadoras");

                    b.Property<bool>("poseeVentiladores")
                        .HasColumnType("INTEGER")
                        .HasColumnName("poseeVentiladores");

                    b.Property<bool>("televisor")
                        .HasColumnType("INTEGER")
                        .HasColumnName("televisor");

                    b.ToTable("AulasMultimedios");
                });

            modelBuilder.Entity("Model.Entity.AulaSinRecursosAdicionales", b =>
                {
                    b.HasBaseType("Model.Abstract.Aula");

                    b.Property<bool>("poseeVentiladores")
                        .HasColumnType("INTEGER")
                        .HasColumnName("poseeVentiladores");

                    b.ToTable("AulasSinRecursosAdicionales");
                });

            modelBuilder.Entity("Model.Entity.Administrador", b =>
                {
                    b.HasOne("DisenioSistemas.Model.Abstract.Usuario", null)
                        .WithOne()
                        .HasForeignKey("Model.Entity.Administrador", "id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entity.Bedel", b =>
                {
                    b.HasOne("DisenioSistemas.Model.Abstract.Usuario", null)
                        .WithOne()
                        .HasForeignKey("Model.Entity.Bedel", "id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entity.AulaInformatica", b =>
                {
                    b.HasOne("Model.Abstract.Aula", null)
                        .WithOne()
                        .HasForeignKey("Model.Entity.AulaInformatica", "idAula")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entity.AulaMultimedios", b =>
                {
                    b.HasOne("Model.Abstract.Aula", null)
                        .WithOne()
                        .HasForeignKey("Model.Entity.AulaMultimedios", "idAula")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entity.AulaSinRecursosAdicionales", b =>
                {
                    b.HasOne("Model.Abstract.Aula", null)
                        .WithOne()
                        .HasForeignKey("Model.Entity.AulaSinRecursosAdicionales", "idAula")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
